@startuml
'https://plantuml.com/class-diagram

abstract class Hero {
# name : string
# health : int

# Hero(name : string, health : int)
}

Hero <|-- Dragonfly
abstract class Dragonfly {
- {static} HEALTH : int
# Dragonfly(name : string, health : int)
}

Hero <-- Medic
interface Medic {
+ {abstract} HealRate : int
+ {abstract} Heal(hero : Hero) : void
}

Hero <-- Warrior
interface Warrior {
+ {abstract} Damage : int
+ {abstract} Attack(hero : Hero) : void
}

Hero <|-- Bug
abstract class Bug {
- {static} HEALTH : int
# Bug(name : string, health : int)
}

Dragonfly <|-- DragonflyMedic
Medic <|.. DragonflyMedic
class DragonflyMedic {
- {static} HEALTH_RATE : int
+ HealRate : int
+ DragonflyMedic(name : string)
+ Heal(hero : Hero) : void
}

Dragonfly <|-- DragonflyWarrior
Warrior <|.. DragonflyWarrior
class DragonflyWarrior {
- {static} DAMAGE_RATE : int
+ Damage : int
+ DragonflyWarrior(name : string)
+ Attack(hero : Hero) : void
}

Bug <|-- BugWarrior
Warrior <|.. BugWarrior
class BugWarrior {
- {static} DAMAGE_RATE : int
+ Damage : int
+ BugWarrior(name : string)
+ Attack(hero : Hero) : void
}

Bug <|-- BugMedic
Medic <|.. BugMedic
class BugMedic {
- {static} HEALTH_RATE : int
+ HealRate : int
+ BugMedic(name : string)
+ Heal(hero : Hero) : void
}

enum HeroType {
Default
Bug
Dragonfly
}

enum SpecType {
Default
Medic
Warrior
}

HeroType <--* HeroBuilder
SpecType <--* HeroBuilder
Hero <--o HeroBuilder
HeroBuilder <--o HeroBuilder
class HeroBuilder {
- name : string
- heroType : HeroType
- specType : SpecType
+ AddName(name : string) : HeroBuilder
+ SetHeroType(heroType : HeroType) : HeroBuilder
+ SetSpecType(specType : SpecType) : HeroBuilder
+ Builder() : Hero
}
BugMedic <.. HeroBuilder
BugWarrior <.. HeroBuilder
DragonflyMedic <.. HeroBuilder
DragonflyWarrior <.. HeroBuilder

@enduml
